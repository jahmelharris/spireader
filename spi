#!/usr/bin/env python

from periphery import SPI
import binascii
import hexdump
import sys
import binascii
import ast

def sendit(request,resplen):
 # Padding for response data
 buffer=request + [0] * resplen
 reqlen=len(request)

 # send the data and get the response
 response=spi.transfer(buffer)
 return response[reqlen:] 

def RDID():
 response={}
 # op code 0x9f, response 3 bytes
 data=sendit([0x9f], 3)

 # First byte - manufacturer ID
 response['manufacturer']=chr(data[0])
 response['type']=chr(data[1])
 response['density']=chr(data[2])
 return response

def RES():
 response={}
 # op code 0xAB, response 3 bytes
 data=sendit([0xAB,0,0,0], 1)

 # First byte - manufacturer ID
 response['device']=chr(data[0])
 return response

def REMS():
 response={}
 # op code 0x90, response 2 bytes
 data=sendit([0x90,0,0], 2)

 # First byte - manufacturer ID
 response['manufacturer']=chr(data[0])
 response['device']=chr(data[1])
 return response

def RDSCUR():
 response={}
 data=sendit([0x2B], 1)

 response['security']=chr(data[0])
 return response

def RDSR():
 response={}
 data=sendit([0x05], 1)

 response['status']=chr(data[0])
 return response

def READ(address, length):
 # op code 0x03
 request=[0x03]

 # address is 3 bytes
 request.append((address & 0xff0000) >> 16) 
 request.append((address & 0xff00) >> 8) 
 request.append(address & 0xff) 
 data=sendit(request, length)

 return ''.join(chr(x) for x in data)
 
def RAW(data, length):
 # op code 0x03
 request=data

 # address is 3 bytes
 d=sendit(request, length)
 print request

 return ''.join(chr(x) for x in d)

def WREN():
 # op code 06
 d=sendit([0x06],0)

def WRDI():
 # op code 04
 d=sendit([0x04],0)

def PP(address, data):
 # op code 02
 request=[0x2]
 

spi=SPI("/dev/spidev0.0", 0, 1000000)

while True:
 line=raw_input("SPI> ")
 commands=line.split(" ")
 if commands[0] == "help":
  print "Commands: RDID REMS RES RDSCUR RDST READ"
 elif commands[0] == "quit" or commands[0] == "exit":
  exit()
 elif commands[0] == "rdid":
  print RDID()
 elif commands[0] == "rems":
  print REMS()
 elif commands[0] == "res":
  print RES()
 elif commands[0] == "rdscur":
  print RDSCUR()
 elif commands[0] == "rdsr":
  print RDSR()
 elif commands[0] == "read":
  addr=long(commands[1],0)
  size=long(commands[2],0)
  d=READ(addr,size)
  print("READ %3x for %d bytes" % (addr,size))
  hexdump.hexdump(d)
 elif commands[0] == "raw":
  data=ast.literal_eval(commands[1])
  print data
  size=long(commands[2],0)
  d=RAW(data,size)
  print("RAW %d bytes" % (size))
  hexdump.hexdump(d)
